'use strict';

var config     		= require('../config'),
	gulp       		= require('gulp'),
	// gulp-load-plugins will only load plugins prefixed with gulp
	plugins			= require('gulp-load-plugins')(),
	browserSync     = require('browser-sync'),
	browserify      = require('browserify'),
	source          = require('vinyl-source-stream'),
	buffer          = require('vinyl-buffer'),
	glob            = require('glob'),
	es              = require('event-stream'),
	mainBowerFiles  = require('main-bower-files');

// watches all modules script.js files as well as the modules.js generated by js-includes
gulp.task('modules-js', function(){

	// modules scripts for partials output
	var files = glob.sync(config.srcPaths.scripts + '/modules.js', config.srcPaths.root + '/modules/**/script.js');

	var tasks = files.map(function(entry, output) {
		return browserify({
			entries: [entry],
			// noParse: [config.bowerDir + '/jquery/dist/jquery.js'] // prevent lag by excluding scripts that dont 'require'
		})
			.bundle()
			.on('error', plugins.notify.onError(function (error) {
				return 'An error occurred while compiling js.\nLook in the console for details.\n' + error;
			}))
			.pipe(source('assets/js/modules.js'))
			.pipe(buffer())
				// Add transformation tasks to the pipeline here.
				.pipe(plugins.sourcemaps.init({loadMaps: true}))
					.pipe(plugins.uglify()) // slow
				.pipe(plugins.sourcemaps.write('./'))
			.pipe(gulp.dest(config.destPaths.root))
			.pipe(browserSync.reload({stream: true}))
	});

});

// watches styleguide.js and iframe.js
gulp.task('styleguide-js', function(){

	// bundles
	var files = [
		config.srcPaths.scripts + '/styleguide.js',
		config.srcPaths.scripts + '/iframe.js'
	];

	var tasks = files.map(function(entry, output) {
		output = entry.replace('src/',''); // change entry/ouput
		return browserify({
			entries: [entry],
			// noParse: [config.bowerDir + '/jquery/dist/jquery.js'] // prevent lag by excluding scripts that dont 'require'
		})
			.bundle()
			.on('error', plugins.notify.onError(function (error) {
				return 'An error occurred while compiling js.\nLook in the console for details.\n' + error;
			}))
			.pipe(source(output))
			.pipe(buffer())
				// Add transformation tasks to the pipeline here.
				.pipe(plugins.sourcemaps.init({loadMaps: true}))
					.pipe(plugins.uglify()) // super slow due to jquery and such
				.pipe(plugins.sourcemaps.write('./'))
			.pipe(gulp.dest(config.destPaths.root))
			.pipe(browserSync.reload({stream: true}))
	});

	// create a merged stream
	return es.merge.apply(null, tasks);

});
