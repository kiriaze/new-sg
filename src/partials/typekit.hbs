<!-- typekit -->
<script src="https://use.typekit.net/mab6hka.js"></script>

<!-- typekit cache -->
<script>
	!function(e,t,n,a,r,c,l,s,o){l=a[r],l&&(s=e.createElement("style"),s.innerHTML=l,e.getElementsByTagName("head")[0].appendChild(s),e.documentElement.className+=" wf-cached "),o=t[n],t[n]=function(e,p,u,i){if("string"==typeof p&&p.indexOf(c)>-1){try{u=new XMLHttpRequest,u.open("GET",p,!0),u.onreadystatechange=function(){try{4==u.readyState&&(i=u.responseText.replace(/url\(\//g,"url("+c+"/"),i!==l&&(a[r]=i))}catch(e){s&&(s.innerHTML="")}},u.send(null)}catch(d){}t[n]=o}return o.apply(this,arguments)}}(document,Element.prototype,"setAttribute",localStorage,"tk","https://use.typekit.net");
</script>

<script>

	// only run if not cached

	if ( ! document.documentElement.getAttribute('class').match('wf-cached') ) {

		// stores a key in session storage if unable to access typekit fonts within 3 seconds so that subsequent requests dont happen and loads the default fonts instead
		(function(d) {
			var tkTimeout = 3000;
			if ( window.sessionStorage ) {
				if ( sessionStorage.getItem('useTypekit') === 'false' ) {
					tkTimeout = 0;
				}
			}
			var config = {
				kitId: 'mab6hka',
				scriptTimeout: tkTimeout,
				async: true,
				active: function(){
					if ( typeof(window.$vent) === 'undefined' ) {
						window.$vent = $('<div></div>');
					}
					window.$vent.triggerHandler('fontsActive');
				}
			},
			h = d.documentElement,
			t = setTimeout( function(){
				h.className = h.className.replace(/\bwf-loading\b/g,"") + "wf-inactive";
				if ( window.sessionStorage ) {
					sessionStorage.setItem("useTypekit","false")
				}
			},
			config.scriptTimeout),
			tk			= d.createElement("script"),
			f			= false,
			s			= d.getElementsByTagName("script")[0],a;
			h.className	+= " wf-loading ";
			tk.src		= '//use.typekit.net/'+ config.kitId +'.js';
			tk.async	= true;
			tk.onload	= tk.onreadystatechange = function(){
				a = this.readyState;
				if ( f || a && a!= "complete" && a != "loaded" ) return;
				f = true;
				clearTimeout(t);
				try{
					Typekit.load(config)
				} catch(e){

				}};
				s.parentNode.insertBefore(tk,s)
		})(document);

	}

 </script>
